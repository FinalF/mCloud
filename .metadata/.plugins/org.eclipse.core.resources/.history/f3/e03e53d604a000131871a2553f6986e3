package HttpAnalysis;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

import org.apache.commons.codec.digest.DigestUtils;

import AbClasses.*;

public class UploadPkg  extends PackageAnalysis {
	Map<String,InfoItemSlot> dataTable = new HashMap<String,InfoItemSlot>();
	
	UploadPkg(){
		super();
	}

	protected void fileScan(File f) throws FileNotFoundException{

		boolean emptyPkg=false;
		String key=null;
		InfoItemSlot item = new InfoItemSlot(null,0,1);
//		System.out.println("File name: "+f.getName());
		
		FileInputStream fin = new FileInputStream(f);
		Scanner in = new Scanner(fin);
		while(in.hasNextLine()){
			/*Process the header*/
//			System.out.println("This line has : "+line.length+" parts");
			String[] line;
			String l=null;
			if(!(l=in.nextLine().trim()).isEmpty()){
				line=l.split(" ");
				if(line[2].contains("HTTP/1.1")){
					item.typeUpdate(line[0]);
					key=line[1];
				}
				else if(line[0].contains("Content-Length")){
					//we record the length
					item.sizeUpdate(line[1]);
//					System.out.println("SIze is: "+line[1]);

//					System.out.println("This package has used chunkencoding");
				}
			}else{
//				System.out.println("Should be an empty line: "+in.nextLine()); //jump the blank line
				/*Process the messagebody*/
				System.out.println("Start to process message");
				StringBuilder s = new StringBuilder();

					System.out.println("No chunk encoding");
					while(in.hasNextLine()){
						s.append(in.nextLine());
					}
				
				key=DigestUtils.shaHex(s.toString());
//				System.out.println("THe hash value is: "+key);
			}
		}
		/*update the hash map*/
		if(dataTable.containsKey(key)){
			dataTable.get(key).countPlus();
		}else{
			dataTable.put(key, item);
		}
	}
	protected void	resultOutput(PrintWriter outputFile, String pkgType){
		System.out.println("Table size: "+dataTable.size());
		super.resultOutput(outputFile, pkgType);
	}
	protected void tablePrint(){
		super.tablePrint();
	}
}
